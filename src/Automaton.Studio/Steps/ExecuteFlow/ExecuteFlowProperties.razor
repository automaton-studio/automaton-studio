@using Blazored.FluentValidation;
@using Automaton.Core.Models;

@inherits FeedbackComponent<ExecuteFlowStep>

<StepProperties Step="@step">

    <Form @ref="form"
          Model="@step"
          LabelColSpan="4"
          WrapperColSpan="20">

        <Validator>
            <FluentValidationValidator @ref="fluentValidationValidator" />
            <ValidationSummary />
        </Validator>

        <ChildContent>
            <Select Mode="single"
                    @bind-Value="context.FlowId"
                    Placeholder="Select flow..."
                    OnFocus="context.OnFocus"
                    TItemValue="Guid"
                    TItem="Guid"
                    AllowClear>
                <SelectOptions>
                    @foreach (var item in context.Flows)
                    {
                        <SelectOption TItemValue="Guid" TItem="Guid" Value=@item.Id Label=@item.Name />
                    }
                </SelectOptions>
            </Select>

            <Tabs>
                <TabPane Tab="Input Variables" Key="2">
                    <Space Direction="DirectionVHType.Vertical">
                        <SpaceItem>
                            <Button OnClick="AddInputVariable" Type="primary">
                                Add
                            </Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Table DataSource="context.InputVariables"
                                   ScrollY="200"
                                   ScrollBarWidth="5"
                                   HidePagination>
                                <ChildContent Context="inputVariable">
                                    <Column Title="Name" TData="string">
                                        <Input Type="text" @bind-Value="inputVariable.Name" AutoFocus />
                                    </Column>
                                    <Column Title="Value" TData="string">
                                        <Input Type="text" @bind-Value="inputVariable.Value" />
                                    </Column>
                                    <ActionColumn Title="Action">
                                        <Popconfirm Title="Sure to delete?"
                                                    OnConfirm="()=> DeleteInputVariable(inputVariable.Name)"
                                                    OkText="Yes"
                                                    CancelText="No">
                                            <a>Delete</a>
                                        </Popconfirm>
                                    </ActionColumn>
                                </ChildContent>
                            </Table>
                        </SpaceItem>
                    </Space>
                </TabPane>

                <TabPane Tab="Output Variables" Key="3">
                    <Space Direction="DirectionVHType.Vertical" Style="width: 100%">
                        <SpaceItem>
                            <Button OnClick="AddOutputVariable" Type="primary">
                                Add
                            </Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Table DataSource="context.OutputVariables"
                                   ScrollY="200px"
                                   ScrollBarWidth="5"
                                   HidePagination>
                                <ChildContent Context="outputVariable">
                                    <Column Title="Name" TData="string">
                                        <Input Type="text" @bind-Value="outputVariable.Name" AutoFocus />
                                    </Column>
                                    <ActionColumn Title="Action">
                                        <Popconfirm Title="Sure to delete?"
                                                    OnConfirm="()=> DeleteOutputVariable(outputVariable.Name)"
                                                    OkText="Yes"
                                                    CancelText="No">
                                            <a>Delete</a>
                                        </Popconfirm>
                                    </ActionColumn>
                                </ChildContent>
                            </Table>
                        </SpaceItem>
                    </Space>
                </TabPane>
            </Tabs>

        </ChildContent>
    </Form>

</StepProperties>

@code {
    private ExecuteFlowStep step;
    private Form<ExecuteFlowStep> form;
    private FluentValidationValidator fluentValidationValidator;

    protected override void OnInitialized()
    {
        step = this.Options;

        base.OnInitialized();
    }

    public override async Task OnFeedbackOkAsync(ModalClosingEventArgs args)
    {
        // Below workaround is required to avoid NewWorkflow dialog
        // close unexpectedly when shown for the first time.
        // The fact that validation happens synchronous (while this method is async) may be the cause of the problem.
        // Please keep both of the next two lines, or find a fix for the issue.
        // Razvan, May 2021
        await InvokeAsync(StateHasChanged);
        await Task.Delay(50);

        var valid = fluentValidationValidator.Validate(options => options.IncludeAllRuleSets());

        if (valid)
        {
            foreach (var variable in step.OutputVariables)
            {
                step.SetOutputValue(variable.Name, variable.Value);
            }
        }

        args.Cancel = !valid;
    }

    public void AddInputVariable()
    {
        var variableName = $"Variable{step.InputVariables?.Count}";
        step.InputVariables.Add(new StepVariable { Name = variableName });
    }

    public void DeleteInputVariable(string name)
    {
        var variable = step.InputVariables.SingleOrDefault(x => x.Name == name);
        step.InputVariables.Remove(variable);
    }

    public void AddOutputVariable()
    {
        var variableName = $"Variable{step.OutputVariables?.Count}";
        step.OutputVariables.Add(new StepVariable { Name = variableName });
    }

    public void DeleteOutputVariable(string name)
    {
        var variable = step.OutputVariables.SingleOrDefault(x => x.Name == name);
        step.OutputVariables.Remove(variable);
    }
}