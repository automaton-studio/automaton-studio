@using Automaton.Core.Models
@using Blazored.FluentValidation;

@inherits FeedbackComponent<AddVariableStep>

<Form @ref="form"
      Model="@step"
      LabelColSpan="4"
      WrapperColSpan="20">
    <Validator>
        <FluentValidationValidator @ref="fluentValidationValidator" />
        <ValidationSummary />
    </Validator>

    <ChildContent>
        <FormItem Label="Name">
            <Input @bind-Value="@context.VariableName" Placeholder="Enter name" />
        </FormItem>
        <FormItem Label="Value">
            <Input @bind-Value="@context.VariableValue" Placeholder="Enter value" />
        </FormItem>
    </ChildContent>
</Form>

@code {
    private Form<AddVariableStep> form;
    private AddVariableStep step;
    private FluentValidationValidator fluentValidationValidator;

    protected override void OnInitialized()
    {
        step = this.Options;
        step.OldVariableName = step.VariableName;

        base.OnInitialized();
    }

    public override async Task OnFeedbackOkAsync(ModalClosingEventArgs args)
    {
        // Below workaround is required to avoid NewWorkflow dialog
        // close unexpectedly when shown for the first time.
        // The fact that validation happens synchronous (while this method is async) may be the cause of the problem.
        // Please keep both of the next two lines, or find a fix for the issue.
        // Razvan, May 2021
        await InvokeAsync(StateHasChanged);
        await Task.Delay(50);

        var valid = fluentValidationValidator.Validate(options => options.IncludeAllRuleSets());

        if (valid)
        {
            var variable = new StepVariable
            {
                OldName = step.OldVariableName,
                Name = step.VariableName,
                Value = step.VariableValue
            };

            step.SetVariable(variable);
        }

        args.Cancel = !valid;
    }
}