@using Blazored.FluentValidation;
@using Automaton.Studio.Domain
@inherits FeedbackComponent<ExecutePythonStep>

<Form @ref="form"
      Model="@step"
      LabelColSpan="4"
      WrapperColSpan="20">
    <Validator>
        <FluentValidationValidator @ref="fluentValidationValidator" />
        @*We don't need a validation summary here because all validations are related to the text fields*@
        @*<ValidationSummary />*@
    </Validator>

    <ChildContent>
        <Tabs>
            <TabPane Tab="Code" Key="1">
                <TextArea Rows="6" />
            </TabPane>
            <TabPane Tab="Input Variables" Key="2">
                <Space Direction="DirectionVHType.Vertical">
                    <SpaceItem>
                        <Button OnClick="AddInputVariable" Type="primary">
                            Add
                        </Button>
                    </SpaceItem>
                    <SpaceItem>
                        <Table 
                            DataSource="context.InputVariables" 
                            RowClassName="@(_=>"editable-row")" 
                            Bordered>
                            <ChildContent Context="inputVariable">
                                <Column Width="30%" DataIndex="@nameof(inputVariable.Name)" TData="string">
                                    <Input Type="text" @bind-Value="inputVariable.Name" AutoFocus />
                                </Column>
                                <Column DataIndex="@nameof(inputVariable.Value)" TData="string">
                                    <Input Type="text" @bind-Value="inputVariable.Value" AutoFocus />
                                </Column>
                                <ActionColumn Title="Action">
                                    <Popconfirm Title="Sure to delete?"
                                                OnConfirm="()=> DeleteInputVariable(inputVariable.Name)"
                                                OkText="Yes"
                                                CancelText="No">
                                        <a>Delete</a>
                                    </Popconfirm>
                                </ActionColumn>
                            </ChildContent>
                        </Table>
                    </SpaceItem>
                </Space>
            </TabPane>

            <TabPane Tab="Output Variables" Key="3">
                <Space Direction="DirectionVHType.Vertical" Style="width: 100%">
                    <SpaceItem>
                        <Button OnClick="AddOutputVariable" Type="primary">
                            Add
                        </Button>
                    </SpaceItem>
                    <SpaceItem>
                        <Table DataSource="context.OutputVariables" 
                            RowClassName="@(_=>"editable-row")" 
                            Bordered>
                            <ChildContent Context="outputVariable">
                                <Column Width="30%" DataIndex="@nameof(outputVariable.Name)" TData="string">
                                    <Input Type="text" @bind-Value="outputVariable.Name" AutoFocus />
                                </Column>
                                <ActionColumn Width="70%" Title="Action">
                                    <Popconfirm Title="Sure to delete?"
                                                OnConfirm="()=> DeleteOutputVariable(outputVariable.Name)"
                                                OkText="Yes"
                                                CancelText="No">
                                        <a>Delete</a>
                                    </Popconfirm>
                                </ActionColumn>
                            </ChildContent>
                        </Table>
                    </SpaceItem>
                </Space>
            </TabPane>
        </Tabs>
    </ChildContent>
</Form>

@code {
    private Form<ExecutePythonStep> form;
    private ExecutePythonStep step;
    private FluentValidationValidator fluentValidationValidator;

    protected override void OnInitialized()
    {
        step = this.Options;
        base.OnInitialized();
    }

    public override async Task OnFeedbackOkAsync(ModalClosingEventArgs args)
    {
        // Below workaround is required to avoid NewWorkflow dialog
        // close unexpectedly when shown for the first time.
        // The fact that validation happens synchronous (while this method is async) may be the cause of the problem.
        // Please keep both of the next two lines, or find a fix for the issue.
        // Razvan, May 2021
        await InvokeAsync(StateHasChanged);
        await Task.Delay(50);

        var valid = fluentValidationValidator.Validate(options => options.IncludeAllRuleSets());

        args.Cancel = !valid;
    }

    public void AddInputVariable()
    {
        var variableName = $"Variable{step.InputVariables?.Count}";
        step.InputVariables.Add(new Variable { Name = variableName });
        StateHasChanged();
    }

    public void DeleteInputVariable(string name)
    {
        var variable = step.InputVariables.SingleOrDefault(x => x.Name == name);
        step.InputVariables.Remove(variable);
    }

    public void AddOutputVariable()
    {
        step.OutputVariables.Add(new Variable());
        StateHasChanged();
    }

    public void DeleteOutputVariable(string name)
    {
        var variable = step.OutputVariables.SingleOrDefault(x => x.Name == name);
        step.OutputVariables.Remove(variable);
    }
}