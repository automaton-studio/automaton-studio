@using Automaton.Studio.Domain
@using Blazored.FluentValidation;
@using Automaton.Core.Models;
@inherits FeedbackComponent<ExecutePythonStep>

<StepProperties Step="@step">

    <Form @ref="form"
          Model="@step"
          LabelColSpan="4"
          WrapperColSpan="20">
        <Validator>
            <FluentValidationValidator @ref="fluentValidationValidator" />
            <ValidationSummary />
        </Validator>

        <ChildContent>
            <Tabs>
                <TabPane Tab="Code" Key="1">
                    <TextArea Rows="6" @bind-Value="context.Code" AutoFocus />
                </TabPane>
                <TabPane Tab="Input Variables" Key="2">
                    <Space Direction="DirectionVHType.Vertical">
                        <SpaceItem>
                            <Button OnClick="AddCodeInputVariable" Type="primary">
                                Add
                            </Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Table DataSource="context.CodeInputVariables"
                                   ScrollY="200"
                                   ScrollBarWidth="5"
                                   HidePagination>
                                <ChildContent Context="inputVariable">
                                    <Column Title="Name" TData="string">
                                        <Input Type="text" @bind-Value="inputVariable.Name" />
                                    </Column>
                                    <Column Title="Value" TData="string">
                                        <Input Type="text" @bind-Value="inputVariable.StringValue" />
                                    </Column>
                                    <ActionColumn Title="Action">
                                        <Popconfirm Title="Sure to delete?"
                                                    OnConfirm="()=> DeleteCodeInputVariable(inputVariable.Name)"
                                                    OkText="Yes"
                                                    CancelText="No">
                                            <a>Delete</a>
                                        </Popconfirm>
                                    </ActionColumn>
                                </ChildContent>
                            </Table>
                        </SpaceItem>
                    </Space>
                </TabPane>

                <TabPane Tab="Output Variables" Key="3">
                    <Space Direction="DirectionVHType.Vertical" Style="width: 100%">
                        <SpaceItem>
                            <Button OnClick="AddCodeOutputVariable" Type="primary">
                                Add
                            </Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Table DataSource="context.CodeOutputVariables"
                                   ScrollY="200px"
                                   ScrollBarWidth="5"
                                   HidePagination>
                                <ChildContent Context="outputVariable">
                                    <Column Title="Name" TData="string">
                                        <Input Type="text" @bind-Value="outputVariable.Name" OnBlur="()=>StopEdit(outputVariable)" AutoFocus />
                                    </Column>
                                    <ActionColumn Title="Action">
                                        <Popconfirm Title="Sure to delete?"
                                                    OnConfirm="()=> DeleteCodeOutputVariable(outputVariable.Name)"
                                                    OkText="Yes"
                                                    CancelText="No">
                                            <a>Delete</a>
                                        </Popconfirm>
                                    </ActionColumn>
                                </ChildContent>
                            </Table>
                        </SpaceItem>
                    </Space>
                </TabPane>
            </Tabs>
        </ChildContent>
    </Form>

</StepProperties>

@code {
    private ExecutePythonStep step;
    private Form<ExecutePythonStep> form;
    private FluentValidationValidator fluentValidationValidator;

    protected override void OnInitialized()
    {
        step = this.Options;

        base.OnInitialized();
    }

    public override async Task OnFeedbackOkAsync(ModalClosingEventArgs args)
    {
        // Below workaround is required to avoid NewWorkflow dialog
        // close unexpectedly when shown for the first time.
        // The fact that validation happens synchronous (while this method is async) may be the cause of the problem.
        // Please keep both of the next two lines, or find a fix for the issue.
        // Razvan, May 2021
        await InvokeAsync(StateHasChanged);
        await Task.Delay(50);

        var valid = fluentValidationValidator.Validate(options => options.IncludeAllRuleSets());

        if (valid)
        {
            foreach (var variable in step.CodeOutputVariables)
            {
                step.SetOutputVariable(variable);
            }
        }

        args.Cancel = !valid;
    }

    public void AddCodeInputVariable()
    {
        var variableName = $"Variable{step.CodeInputVariables?.Count}";
        step.CodeInputVariables.Add(new StringStepVariable { Name = variableName });
    }

    public void DeleteCodeInputVariable(string name)
    {
        var variable = step.CodeInputVariables.SingleOrDefault(x => x.Name == name);
        step.CodeInputVariables.Remove(variable);
    }

    public void AddCodeOutputVariable()
    {
        var variableName = $"Variable{step.CodeOutputVariables?.Count}";
        var variable = new StepVariable { Id = Guid.NewGuid().ToString(), Name = variableName };
        step.CodeOutputVariables.Add(variable);
        step.SetOutputVariable(variable);
    }

    public void DeleteCodeOutputVariable(string name)
    {
        var variable = step.CodeOutputVariables.SingleOrDefault(x => x.Name == name);
        step.CodeOutputVariables.Remove(variable);
        step.DeleteOutputVariable(variable);
    }

    private void StopEdit(StepVariable stepVariable)
    {
        if (stepVariable.Id != null)
        {
            step.SetOutputVariable(stepVariable);
        }
    }
}