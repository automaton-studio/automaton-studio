@using Automaton.Studio.Domain;
@using System.Text
@implements IDisposable

<div class="@GetClassesForDropzone()" 
     @ondragover:preventDefault
     @ondragover="()=>{}"
     @ondragenter:preventDefault
     @ondragenter="()=>{}"
     @ondrop="()=>OnDrop()"
     @onmousedown="()=>DropzoneMouseDown()"
     @onclick="()=>DropzoneClick()"
     @ondrop:preventDefault
     @ondrop:stopPropagation
     @ondragenter:stopPropagation
     @ondragend:stopPropagation
     @ondragover:stopPropagation
     @ondragleave:stopPropagation
     @ondragstart:stopPropagation
     ondragstart="event.dataTransfer.setData('text', event.target.id);">

    <div @ondrop="()=>OnDropStepOnSpacing()"
         @ondrop:stopPropagation
         @ondragleave="()=>OnDragLeaveFirstSpacing()"
         @ondragenter="()=>OnDragEnterFirstSpacing()"
         class="@GetStepSpacerClass(null)">
    </div>

    @foreach (var item in Items)
    {
        <div id="@item.Id" 
         draggable="@IsStepDragable(item)"
         @ondragstart="()=>OnStepDragStart(item)"
         @ondragend="()=>OnStepDragEnd()"
         @ondragenter="()=>OnStepDragEnter(item)"
         @ondragover="(x)=>OnStepDragOver(x, item)"
         @ondragleave="()=>OnStepDragLeave()"
         @ondrop="()=>OnDropStepOnSpacing()"
         @onclick="()=>OnStepClick(item)"
         @ondblclick="()=>OnStepDoubleClick(item)"
         @ondblclick:stopPropagation="true"
         @onmousedown="()=>OnStepMouseDown(item)"
         @onmousedown:stopPropagation="true"
         class="@GetClassesForDraggable(item) 
         @CheckIfDragOperationIsInProgess() 
         @CheckIfDraggable(item)">

            @{
                if (ChildContent != null)
                {
                    @ChildContent(item);
                }
            }
        </div>

        <div @ondrop="()=>OnDropStepOnSpacing()"
         @ondrop:stopPropagation
         @ondragleave="()=>OnDragLeaveSpacing(item)"
         @ondragenter="()=>OnDragEnterSpacing(item)"
         class="@GetStepSpacerClass(item)">
        </div>
    }

    @*<div @ondrop="()=>OnDropItemOnSpacing(Items.Count())"
         @ondrop:stopPropagation
         @ondragleave="()=>OnDragLeaveDropzoneSpacing()"
         @ondragenter="(e)=>OnDragEnterDropzoneSpacing(e)"
         class="dropzone-spacing">
    </div>*@

</div>

<style>

    .dropzone {
        overflow: auto;
        height: calc(100vh - 115px);
    }

    .step-active-spacing {
        height: 15px;
        min-height: 15px;
        background-color: deepskyblue;
    }

    .step-spacing {
        height: 15px;
        min-height: 15px;
    }

   /* .dropzone-spacing {
        background-color: yellow;
        flex: 1; /* Fill the remaining of empty dropzone space*/
    }*/

</style>