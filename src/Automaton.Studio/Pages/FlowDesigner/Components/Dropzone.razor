@using Automaton.Studio.Domain;
@using System.Text
@using Automaton.Studio.Steps.Sequence
@implements IDisposable

<div class="@GetClassesForDropzone()"
     @ondragover:preventDefault
     @ondragover="()=>{}"
     @ondragenter:preventDefault
     @ondragenter="()=>{}"
     @ondrop="()=>OnDropzoneDrop()"
     @onmousedown="()=>OnDropzoneMouseDown()"
     @onclick="()=>OnDropzoneClick()"
     @ondrop:preventDefault
     @ondrop:stopPropagation
     @ondragenter:stopPropagation
     @ondragend:stopPropagation
     @ondragover:stopPropagation
     @ondragleave:stopPropagation
     @ondragstart:stopPropagation
     ondragstart="event.dataTransfer.setData('text', event.target.id);">

    <div style="float: left;
        min-width: 50px;
        max-width: 50px;
        padding: 15px 2px 2px 2px;
        margin-right: 10px;">
        @{
            int i = 1;
            foreach (var step in Steps)
                {
                    <div style="height: 72px; width: 100%; text-align: center; padding: 20px 2px 0 20px; border-right: 1px solid #EEE;">
                     @if(step.IsExecuting)
                    {
                        <b>@i</b>
                    }
                    else
                    {
                        @i
                    }
                </div>
                <div class="step-spacing"></div>
                i++;
            }
            }
        </div>
    <div style="padding-left: 50px;">
        <div @ondrop="()=>OnSpacerDrop()"
             @ondrop:stopPropagation
             @ondragleave="()=>OnSpacerDragLeave()"
             @ondragenter="()=>OnSpacerDragEnter()"
             class="@GetSpacerClass(null)">
        </div>

        @{
            foreach (var step in Steps)
            {
                BeforeStepRender(step);

                <div id="@step.Id" draggable="@IsStepDragable(step)"
                 @ondragstart="()=>OnStepDragStart(step)"
                 @ondragend="()=>OnStepDragEnd()"
                 @ondragenter="()=>OnStepDragEnter(step)"
                 @ondragover="(x)=>OnStepDragOver(x, step)"
                 @ondragleave="()=>OnStepDragLeave()"
                 @ondrop="()=>OnSpacerDrop()"
                 @onclick="()=>OnStepClick(step)"
                 @ondblclick="()=>OnStepDoubleClick(step)"
                 @ondblclick:stopPropagation="true"
                 @onmousedown="()=>OnStepMouseDown(step)"
                 @onmousedown:stopPropagation="true"
                 class="@GetClassesForDraggable(step)
                 @CheckIfDragOperationIsInProgess()
                 @CheckIfDraggable(step) @CheckVisibility(step)"
                 style="margin-left: @GetStepMargin()">

                    @ChildContent(step)

                </div>

                <div @ondrop="()=>OnSpacerDrop()"
                 @ondrop:stopPropagation
                 @ondragleave="()=>OnSpacerDragLeave()"
                 @ondragenter="()=>OnSpacerDragEnter(step)"
                 class="@GetSpacerClass(step) @CheckVisibility(step)">
                </div>

                AfterStepRender(step);
            }
        }
    </div>
</div>

<style>

    .dropzone {
        overflow: auto;
        height: calc(100vh - 115px);
    }

    .step-active-spacing {
        height: 15px;
        min-height: 15px;
        background-color: deepskyblue;
    }

    .step-spacing {
        height: 15px;
        min-height: 15px;
        border-right: 1px solid #EEE;
    }

    .step-visibility {
        display: none;
    }

    .step-spacing {
        height: 15px;
        min-height: 15px;
    }

</style>