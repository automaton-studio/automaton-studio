@using Automaton.Studio.Domain
@using Automaton.Core.Models

@if (editing)
{
    <Input Type="text" @bind-Value="@Variable.Name" OnBlur="StopEdit" OnPressEnter="OnPressEnter" AutoFocus />

    if (ValidationErrors)
    {
        <span class="validation-message">@validationMessage</span>
    }
}
else
{
    <a href="" @onclick:preventDefault class="editable-cell-value-wrap" @onclick="()=>StartEdit()">@Variable.Name</a>
}

@code {
    private bool editing;
    private string validationMessage;

    private bool ValidationErrors => !string.IsNullOrEmpty(validationMessage);

    [Parameter]
    public StepVariable Variable { get; set; }

    [Parameter]
    public StudioStep Step { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void OnPressEnter()
    {
        StopEdit();
    }

    private void StartEdit()
    {
        Variable.OldName = Variable.Name;

        validationMessage = string.Empty;
        editing = true;
    }

    private void StopEdit()
    {
        if (Variable.VariableNameIsTheSame())
        {
            editing = false;
        }

        if (VariableNameIsValid())
        {
            Step.SetOutputVariable(Variable);

            editing = false;
        }
    }

    private bool VariableNameIsValid()
    {
        if (NameIsEmpty())
        {
            validationMessage = Resources.Errors.NameRequired;
            return false;
        }

        if (NameIsNotUnique())
        {
            validationMessage = Resources.Errors.NameExists;
            return false;
        }

        return true;
    }

    private bool NameIsEmpty()
    {
        return string.IsNullOrEmpty(Variable.Name);
    }

    private bool NameIsNotUnique()
    {
        var flowVariables = Step.Definition.Flow.Variables;

        var nameIsNotUnique = flowVariables.ContainsKey(Variable.Name);

        return nameIsNotUnique;
    }
}

<style>
    .editable-cell {
        position: relative;
    }

    .editable-cell-value-wrap {
        cursor: pointer;
    }
</style>
