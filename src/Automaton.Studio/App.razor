@using Automaton.App.Account.Account;
@using Automaton.App.Authentication.Pages.Login;
@using Automaton.Client.Auth.Services;
@using Automaton.Core.Logs;
@using Automaton.Studio.Shared
@using Automaton.Studio.Pages
@using Automaton.Studio.Logging
@using Serilog;
@using Serilog.Formatting.Json;

<Router 
    AppAssembly="@this.GetType().Assembly"
        AdditionalAssemblies="new[] { typeof(AccountPage).Assembly, typeof(LoginPage).Assembly }"
        PreferExactMatches="@true">

    <Found Context="routeData">
        <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
            <NotAuthorized>
                @if (context.User.Identity?.IsAuthenticated != true)
                {
                    <RedirectToLogin />
                }
                else
                {
                    <p role="alert">You are not authorized to access this resource.</p>
                }
            </NotAuthorized>
        </AuthorizeRouteView>
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <CustomNotFound />
        </LayoutView>
    </NotFound>
</Router>

@*To display the pop-up component dynamically, we need to add the <AntContainer /> component in App.razor*@
@*https://github.com/ant-design-blazor/ant-design-blazor*@
<AntContainer />

@code {

    [Inject] public CustomHttpClient CustomHttpClient { get; set; }
    [Inject] public ClientAuthConfigurationService ClientAuthConfigurationService { get; set; }
    [Inject] public WorkflowSink WorkflowSink { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ConfigureSerilog();
    }

    /// <summary>
    /// Configure Serilog here because we need the injected CustomHttpClient
    /// and I did not know how to generate it in ServiceCollectionExtension.AddStudio()
    /// </summary>
    /// <returns></returns>
    private async Task ConfigureSerilog()
    {
        await Task.Run(() =>
            Log.Logger = new LoggerConfiguration()
                .Enrich.FromLogContext()
                .WriteTo.Http(
                    requestUri: ClientAuthConfigurationService.LogsUrl,
                    httpClient: CustomHttpClient,
                    queueLimitBytes: null)
                .WriteTo.Sink(WorkflowSink)
                .CreateLogger());
    }
}
